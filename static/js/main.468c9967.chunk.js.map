{"version":3,"sources":["constants.js","components/Fifteen/reducer.js","components/Fifteen/Board/Number/index.js","components/Fifteen/Board/index.js","components/Fifteen/Rules/fifteen.jpeg","components/Fifteen/Rules/index.js","hooks/useInterval/index.js","components/Fifteen/Timer/index.js","components/Fifteen/index.js","index.js"],"names":["PLAYERS","selectFrom","lowerValue","upperValue","choices","Math","floor","random","boardNumbers","i","push","value","isUsed","id","initialState","currentPlayer","currentSelections","loser","isGameOver","ACTIONS","reducer","state","action","type","forEach","selection","find","boardNumber","toBeAdded","includes","toBeRemoved","splice","indexOf","Number","number","dispatch","data-testid","className","classNames","selected","used","onClick","length","React","memo","Board","map","Rules","startGame","src","fifteen","alt","useInterval","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","Timer","testTimer","useState","timer","setTimer","Fifteen","testBoardNumbers","useReducer","rulesVisible","setRulesVisible","filter","reduce","accumulator","currentValue","isSumOfSelectionsFifteen","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.468c9967.chunk.js","sourcesContent":["export const FIFTEEN = 15;\n\nexport const PLAYERS = {\n  ONE: 1,\n  TWO: 2,\n};\n","import { PLAYERS } from '../../constants';\n\nfunction selectFrom(lowerValue, upperValue) {\n  var choices = upperValue - lowerValue + 1;\n  return Math.floor(Math.random() * choices + lowerValue);\n}\n\nlet boardNumbers = [];\n\nfor (let i = 0; i < 50; i++) {\n  boardNumbers.push({ value: selectFrom(1, 9), isUsed: false, id: i });\n}\n\nexport const initialState = {\n  boardNumbers,\n  currentPlayer: PLAYERS.ONE,\n  currentSelections: [],\n  loser: '',\n  isGameOver: false,\n};\n\nexport const ACTIONS = {\n  TOGGLE_CURRENT_PLAYER: 5,\n  SET_GAME_OVER: 10,\n  ADD_TO_CURRENT_SELECTIONS: 11,\n  REMOVE_FROM_CURRENT_SELECTIONS: 13,\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case ACTIONS.TOGGLE_CURRENT_PLAYER: {\n      const { boardNumbers, currentSelections } = state;\n      currentSelections.forEach(selection => {\n        boardNumbers.find(\n          boardNumber => boardNumber.id === selection\n        ).isUsed = true;\n      });\n      return {\n        ...state,\n        currentSelections: [],\n        currentPlayer:\n          state.currentPlayer === PLAYERS.ONE ? PLAYERS.TWO : PLAYERS.ONE,\n        boardNumbers: [...boardNumbers],\n      };\n    }\n    case ACTIONS.ADD_TO_CURRENT_SELECTIONS:\n      return {\n        ...state,\n        currentSelections: [...state.currentSelections, action.toBeAdded],\n      };\n    case ACTIONS.REMOVE_FROM_CURRENT_SELECTIONS: {\n      const { currentSelections } = state;\n      currentSelections.includes(action.toBeRemoved) &&\n        currentSelections.splice(\n          currentSelections.indexOf(action.toBeRemoved),\n          1\n        );\n      return {\n        ...state,\n        currentSelections: [...currentSelections],\n      };\n    }\n    case ACTIONS.SET_GAME_OVER:\n      return { ...state, isGameOver: true, loser: state.currentPlayer };\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { ACTIONS } from '../../reducer.js';\n\nimport './index.css';\n\nconst Number = ({\n  number: { value, id, isUsed },\n  currentSelections,\n  isGameOver,\n  dispatch,\n}) => {\n  const onNumberClick = () => {\n    if (isUsed || isGameOver) {\n      return;\n    }\n\n    if (currentSelections.includes(id)) {\n      dispatch({\n        type: ACTIONS.REMOVE_FROM_CURRENT_SELECTIONS,\n        toBeRemoved: id,\n      });\n      return;\n    }\n\n    if (currentSelections.length < 3) {\n      dispatch({\n        type: ACTIONS.ADD_TO_CURRENT_SELECTIONS,\n        toBeAdded: id,\n      });\n    }\n  };\n  return (\n    <div\n      data-testid={`number-${id}`}\n      className={classNames({\n        number: true,\n        selected: currentSelections.includes(id),\n        used: isUsed,\n      })}\n      onClick={onNumberClick}\n    >\n      {value}\n    </div>\n  );\n};\n\nNumber.propTypes = {\n  number: PropTypes.shape({\n    value: PropTypes.number.isRequired,\n    id: PropTypes.number.isRequired,\n    isUsed: PropTypes.bool.isRequired,\n  }).isRequired,\n  currentSelections: PropTypes.arrayOf(PropTypes.number).isRequired,\n  isGameOver: PropTypes.bool.isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n\nexport default React.memo(Number);\n","import './index.css';\nimport PropTypes from 'prop-types';\n\nimport Number from './Number';\n\nconst Board = ({ boardNumbers, currentSelections, dispatch, isGameOver }) => {\n  return (\n    <div className=\"board\" data-testid=\"board\">\n      {boardNumbers.map(number => (\n        <Number\n          key={number.id}\n          isGameOver={isGameOver}\n          number={number}\n          currentSelections={currentSelections}\n          dispatch={dispatch}\n        />\n      ))}\n    </div>\n  );\n};\n\nBoard.propTypes = {\n  boardNumbers: PropTypes.arrayOf(\n    PropTypes.shape({\n      value: PropTypes.number.isRequired,\n      id: PropTypes.number.isRequired,\n      isUsed: PropTypes.bool.isRequired,\n    })\n  ).isRequired,\n  currentSelections: PropTypes.arrayOf(PropTypes.number).isRequired,\n  isGameOver: PropTypes.bool.isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","export default __webpack_public_path__ + \"static/media/fifteen.1b19e599.jpeg\";","import PropTypes from 'prop-types';\n\nimport fifteen from './fifteen.jpeg';\n\nimport './index.css';\n\nconst Rules = ({ startGame }) => {\n  return (\n    <div className=\"home\">\n      <div className=\"banner\">\n        <img src={fifteen} alt=\"15\"></img>\n      </div>\n      <div className=\"rules\">\n        <p>\n          Players take it in turns to select 2 or 3 circles that total 15 in\n          15s.\n        </p>\n        <p>\n          A player could select 2 circles, e.g. 7 and 8 or 3 circles, e.g. 4, 5\n          and 6.\n        </p>\n        <p>The last player who selects a combination of 15 is the winner.</p>\n        <button onClick={startGame}>START</button>\n      </div>\n    </div>\n  );\n};\n\nRules.propTypes = {\n  startGame: PropTypes.func.isRequired,\n};\n\nexport default Rules;\n","/**\n * This hook is copied from - https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n */\n\nimport { useEffect, useRef } from 'react';\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest function.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;\n","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { ACTIONS } from '../reducer.js';\nimport { PLAYERS, FIFTEEN } from '../../../constants.js';\nimport useInterval from '../../../hooks/useInterval';\n\nimport './index.css';\n\nconst Timer = ({ dispatch, currentPlayer, testTimer }) => {\n  const [timer, setTimer] = useState(testTimer || FIFTEEN);\n  useEffect(() => {\n    if (timer === 0) {\n      dispatch({ type: ACTIONS.SET_GAME_OVER });\n    }\n  }, [dispatch, timer]);\n\n  useInterval(() => {\n    if (timer > 0) {\n      setTimer(timer - 1);\n    }\n  }, 1000);\n\n  return (\n    <label\n      data-testid={`timer-player-${currentPlayer}`}\n      className={`timer player-${currentPlayer}`}\n    >\n      {`00:${timer < 10 ? '0' + timer : timer}`}\n    </label>\n  );\n};\n\nTimer.propTypes = {\n  currentPlayer: PropTypes.oneOf([PLAYERS.ONE, PLAYERS.TWO]),\n  dispatch: PropTypes.func.isRequired,\n  testTimer: PropTypes.number,\n};\n\nexport default Timer;\n","import { useEffect, useReducer, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { PLAYERS, FIFTEEN } from '../../constants.js';\nimport { initialState, reducer, ACTIONS } from './reducer.js';\nimport Board from './Board';\nimport Rules from './Rules';\nimport Timer from './Timer';\n\nimport './index.css';\n\nconst isSumOfSelectionsFifteen = (currentSelections, boardNumbers) => {\n  return (\n    boardNumbers\n      .filter(({ id }) => currentSelections.includes(id))\n      .map(({ value }) => value)\n      .reduce((accumulator, currentValue) => accumulator + currentValue, 0) ===\n    FIFTEEN\n  );\n};\n\nconst Fifteen = ({ testBoardNumbers }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [rulesVisible, setRulesVisible] = useState(true);\n  const {\n    boardNumbers,\n    currentPlayer,\n    currentSelections,\n    loser,\n    isGameOver,\n  } = state;\n\n  useEffect(() => {\n    if (isSumOfSelectionsFifteen(currentSelections, boardNumbers)) {\n      dispatch({ type: ACTIONS.TOGGLE_CURRENT_PLAYER });\n    }\n  }, [currentSelections, boardNumbers]);\n\n  if (rulesVisible) {\n    return <Rules startGame={() => setRulesVisible(false)} />;\n  }\n\n  return (\n    <div className={`fifteen player-${currentPlayer}`}>\n      <div className=\"result-and-timer\">\n        {isGameOver && (\n          <div data-testid=\"game-result-player-2\" className=\"player-2\">\n            {loser === PLAYERS.TWO ? 'You Lost' : 'You Won'}\n          </div>\n        )}\n        {currentPlayer === PLAYERS.ONE && !isGameOver && (\n          <Timer currentPlayer={currentPlayer} dispatch={dispatch} />\n        )}\n      </div>\n      <Board\n        isGameOver={isGameOver}\n        dispatch={dispatch}\n        currentSelections={currentSelections}\n        boardNumbers={testBoardNumbers || boardNumbers}\n      />\n      <div className=\"result-and-timer\">\n        {isGameOver && (\n          <div data-testid=\"game-result-player-1\" className=\"player-1\">\n            {loser === PLAYERS.ONE ? 'You Lost' : 'You Won'}\n          </div>\n        )}\n        {currentPlayer === PLAYERS.TWO && !isGameOver && (\n          <Timer currentPlayer={currentPlayer} dispatch={dispatch} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nFifteen.propTypes = {\n  testBoardNumbers: PropTypes.arrayOf(\n    PropTypes.shape({\n      value: PropTypes.number.isRequired,\n      id: PropTypes.number.isRequired,\n      isUsed: PropTypes.bool.isRequired,\n    })\n  ),\n};\nexport default Fifteen;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Fifteen from './components/Fifteen';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Fifteen />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}